{"version":3,"sources":["components/navbar.jsx","components/about-us.jsx","components/contact-us.jsx","components/mainImage.jsx","components/home-page.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","react_router_dom","to","AboutUs","ContactUs","MainImage","class","Home","mainImage","App","navbar","react_router","exact","path","render","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAeeA,EAZA,kBACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,QAAQE,GAAG,KAA3B,gBACEL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OACZH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,OAAOE,GAAG,aAA1B,YACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,OAAOE,GAAG,eAA1B,kBCDDC,EANC,kBACZN,EAAAC,EAAAC,cAAA,wBCKWK,EANG,kBACdP,EAAAC,EAAAC,cAAA,0BCcWM,EAfG,kBACVR,EAAAC,EAAAC,cAAA,OAAKO,MAAM,UAIPT,EAAAC,EAAAC,cAAA,OAAKO,MAAM,oBACPT,EAAAC,EAAAC,cAAA,MAAIO,MAAM,mBACNT,EAAAC,EAAAC,cAAA,QAAMO,MAAM,yBAAZ,YACAT,EAAAC,EAAAC,cAAA,QAAMO,MAAM,wBAAZ,oBCFLC,EAJF,kBACTV,EAAAC,EAAAC,cAACS,EAAD,OCuBWC,0LAhBb,OACEZ,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACW,EAAD,MAEAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAASP,IAC/BV,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,OAAQX,IACtCN,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,OAAQV,cAVhCW,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASP,OAAOjB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.68ac72cb.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => (\n    <div className=\"navBar\">\n        <div className=\"textLogo\">\n            <Link className=\"title\" to=\"/\">Wigan Coders</Link>\n              <ul className=\"nav\">\n                <Link className=\"item\" to=\"/about-us\">About Us</Link>\n                <Link className=\"item\" to=\"/contact-us\">Contact Us</Link>\n              </ul>\n        </div>    \n    </div>\n);\n\nexport default NavBar;\n","import React from 'react';\n\nconst AboutUs = () => (\n    <div>\n        About Us\n    </div>\n);\n\nexport default AboutUs;","import React from 'react';\n\nconst ContactUs = () => (\n    <div>\n        Contact Us\n    </div>\n);\n\nexport default ContactUs;","import React from 'react'\n\nconst MainImage = () => (\n        <div class=\"header\">\n            {/* <div class=\"header__logo-box\">\n                <img src=\"img/logo-white.png\" alt=\"Logo\" class=\"header__logo\" />\n            </div> */}\n            <div class=\"header__text-box\">\n                <h1 class=\"heading-primary\">\n                    <span class=\"heading-primary--main\">Who will</span>\n                    <span class=\"heading-primary--sub\">we become...</span>\n                </h1>\n                {/* <a href='#' class=\"btn btn--white btn--animated\">Discover</a> */}\n            </div>\n        </div>\n);\n\nexport default MainImage;","import React from 'react';\n\nimport MainImage from '../components/mainImage';\n\nconst Home = () => (\n    <MainImage />\n)\n\nexport default Home;","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport NavBar from './components/navbar';\nimport AboutUs from  './components/about-us';\nimport ContactUs from './components/contact-us';\nimport Home from './components/home-page';\n\nimport './css/style.css';\n\nclass App extends Component {\n  render() {\n  return (\n    <BrowserRouter>\n      <div className=\"app\">\n        <NavBar />\n\n        <Switch>\n          <Route exact path=\"/\" render ={Home} />\n          <Route exact path=\"/about-us\" render={AboutUs} />\n          <Route exact path=\"/contact-us\" render={ContactUs} />\n        </Switch>\n      </div>\n      </BrowserRouter>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}